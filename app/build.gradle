apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "unclutter.asksven.com.unclutter"
        minSdkVersion 22 // we want it to be 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        versionNameSuffix = getBuildSuffix()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testBuildType "debug"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_RELEASE") ?: "app.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
        debug {
            storeFile file(System.getenv("KEYSTORE_DEBUG") ?: "app.keystore")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
        }
    }

    // we have different package name for the variants
    flavorDimensions "edition"
    productFlavors {
        gplay {
            dimension "edition"
            applicationId "com.asksven.unclutter"
            signingConfig signingConfigs.release
        }
        hockeyappedition {
            dimension "edition"
            applicationId "com.asksven.unclutter_hockeyappedition"
            signingConfig signingConfigs.release
        }
    }

    // and a naming policy for the apks
    applicationVariants.all { variant ->
        variant.outputs.all {
            def project = "unclutter"
            def SEP = "_"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName

            def newApkName = project + SEP + buildType + SEP + version + ".apk"
            outputFileName = newApkName
        }

    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    compile 'net.hockeyapp.android:HockeySDK:4.1.3'
    compile 'com.android.support:recyclerview-v7:26.+'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:support-v4:26.+'
    testCompile 'junit:junit:4.12'
}

def getBuildSuffix() {
    def ret = ""
    def buildNumber = System.getenv("CIRCLE_BUILD_NUM")
    if (buildNumber != null) {
        ret = "-" + buildNumber
    }

    println ">>>>> Build number: \"" + ret + "\"";
    return ret
}


